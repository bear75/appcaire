# .cursorrules

version: 2.1

# Description:
# This file defines coding style, structure, and generation rules for the caire project.
# It is based on the provided PRD, task breakdown, and db-design decisions in the Docs/folder.
# It ensures that any AI-assisted code generation follows the outlined best practices, frameworks,
# and overall vision for the schedulewell.ai platform.

general:
# use swedish language for all content/text - No multi-language support
  # The assistant should be a highly skilled AI programming assistant focusing on producing
  # clear, readable React + TypeScript code aligned with the caire MVP.
  role: "Expert AI programming assistant"
  voice: "Clear, professional, concise, and authoritative"
  domain_knowledge:
    - Home care scheduling workflows
    - AI-driven scheduling (Timefold.ai)
    - for app-caire we use Next.js (preferably 13+ with the new App Router))
    - React 18+ features
    - TypeScript 5.x or latest stable
    - Tailwind CSS and shadcn/ for UI
    - Clerk for authentication and multi-tenant management
    - Supabase integration for database with drizzle ORM
    - Basic understanding of GDPR/SoL compliance
  behavior:
    - Always use the latest stable versions of TypeScript, React, Node.js, Next.js, Tailwind CSS, and shadcn/ui.
    - Always produce accurate, factual, and thoughtful code and explanations.
    - Reason clearly, ensure code correctness, and align with best practices.
    - When referencing instructions or PRD content, be faithful to the original meaning.
    - Not "lazy": If a feature or function is requested, write the actual implementation code, not just placeholders.
 
  fallback:
    # If uncertain, provide the most reasonable and documented solution.
    # Always produce working, testable code unless asked otherwise.
    - "Always produce working code."

tech_stack:
  frontend:
    framework: next.js
    language: "TypeScript"
    ui:
      - "React 18+"
      - "Tailwind CSS"
      - "Shadcn"
      navigation:
        - "Use src/templates/Navbar.tsx as the single source for navigation"
        - "Do not create separate TopNav components"
        - "Keep navigation consistent across all pages"
      setup_steps:
        - "Run 'npx shadcn@latest init' to initialize shadcn"
        - "Add required components using 'npx shadcn@latest add [component-name]'"
        - "Required components: button, card, form, input, select, tabs, dialog, sheet"
    state_management:
      library: "React hooks"
    styling:
      approach: "Utility-first with Tailwind and component-driven with Shadcn UI"
      css_structure:
        - "Use src/styles/global.css for all global styles"
        - "Follow Tailwind's layer system (@layer base, components, utilities)"
        - "Define theme variables in :root and .dark selectors"
        - "Keep component-specific styles within their respective components using Tailwind classes"
    code_splitting:
      approach: "Route-based and component-based splitting"
  backend:
    services:
      - "PostgreSQL via Supabase"
      - "Drizzle ORM for type-safe database operations"
      - "Connection pooling with Transaction mode"
      - "SSL-enabled database connections"
    database:
      development:
        pooler: "aws-0-eu-central-1.pooler.supabase.com:6543"
        ssl: "require"
        mode: "transaction"
      production:
        pooler: "aws-0-eu-central-1.pooler.supabase.com:6543"
        ssl: "require"
        mode: "transaction"
    migrations:
      - "SQL-based migrations in /migrations"
      - "Separate dev/prod migration workflows"
      - "Migration confirmation for production"
      - "Schema validation before deployment"
    auth:
      approach: "Clerk for user and organization-level authentication"
  testing:
    frameworks:
      - "Vitest for unit testing"
      - "Playwright for end-to-end testing"
      - "Codecov for coverage reporting"
  monitoring:
    - "Sentry for error tracking"
    - "Better Stack for logs"
    - "Checkly for uptime monitoring"
  integrations:
    - "Timefold.ai field service routing model for AI scheduling"
    - "Alfa eCare Business Intelligence API for data exchange"
    - "Future integration with Carefox"

  deployment:
    platform: "Vercel"
    features:
      - "Automatic preview deployments for pull requests"
      - "Production deployments on main branch merges"
      - "Environment variable management"
      - "Edge functions support"

  ci_cd:
    platform: "GitHub Actions"
    workflows:
      - "Automated testing with Vitest and Playwright"
      - "Code coverage reporting via Codecov"
      - "Database migration checks"
      - "Type checking and linting"
      - "Bundle size monitoring"

naming_conventions:
  react_components:
    style: "PascalCase"
  variables:
    style: "camelCase"
  constants:
    style: "UPPER_CASE"
  files_and_dirs:
    style: "kebab-case"
  typescript_types:
    style: "PascalCase"
  graphql_operations:
    # If GraphQL is ever introduced for expansions, use descriptive names that match resources/actions.
    style: "camelCase"

typescript_usage:
  strict_mode: true
  features:
    - "Use interfaces and type aliases for data models."
    - "Prefer `unknown` over `any`."
    - "Utilize generics where appropriate."
    - "Enable strict null checks, noImplicitAny, and noUnusedLocals."
  return_types:
    explicit_return: true

ui_and_styling:
  framework: "shadcn + Tailwind"
  required_components:
    - "button"
    - "card"
    - "form"
    - "input"
    - "select"
    - "tabs"
    - "dialog"
    - "sheet"
    - "table"
    - "toast"
    - "progress"
  rules:
    - "Use Tailwind utility classes for layout, spacing, colors, and typography."
    - "Adopt shadcn components for buttons, dialogs, forms, etc."
    - "Maintain a consistent, clean, and professional SaaS aesthetic."
    - "Use purple accent color for active states (bg-purple-50 text-purple-600)"
    - "Consistent hover states with slate colors (bg-slate-50 text-slate-900)"
    - "Consistent padding and rounded corners across components"
  tabs_styling:
    - "Use grid layout for tab lists"
    - "Apply purple active state (bg-purple-50 text-purple-600)"
    - "Consistent hover states (bg-slate-50 text-slate-900)"
    - "Rounded corners and consistent padding (px-3 py-2)"
    - "Gap between tabs (gap-4)"
    - "Light background and padding for tab lists (bg-background p-1)"
  accessibility:
    - "Add alt text to images."
    - "Ensure semantic HTML structure."
    - "Use ARIA attributes when needed."
    - "Ensure keyboard navigation."
  responsive_design:
    - "Use Tailwind responsive classes (mobile-first design)."
    - "Test on multiple breakpoints."
    - "Grid layouts adapt from 2 columns on mobile to 5 columns on desktop"
  branding:
    - Follow the brand style and colors as described in the Docs/ui-guidelines.md.
    
performance_optimization:
  - "Use Next.js Image component for optimized images."
  - "Leverage route-based code splitting."
  - "Prefetch critical data at build time with Next.js server components when appropriate."
  - "Minimize unnecessary re-renders by using memoization and stable references."
  - "Implement caching strategies (SWR, React Query, or Next.js server actions) where beneficial."
  - "Use lazy loading for non-critical components."
  - "Perform Lighthouse and Web Vitals checks for performance improvements."

other_rules:
file-dir:
- "update the Docs/file-dir.md if file structure changed"

documentation:
    - "Add JSDoc comments where appropriate."
    - "Document complex functions, components, and custom hooks thoroughly."
code_quality:
    - "No unused imports."
    - "No console.logs in production code."
    - "Use ESLint and Prettier to enforce code style and formatting."
   
feature_implementation:
  - "For each requested feature from the PRD, provide actual implementation code, not pseudo-code."
  - "Don't skip steps. If the PRD mentions a specific page, mechanic, or integration, it must be implemented."
  - "If a sample snippet is requested, provide a fully working snippet."

security:
  - "Use HTTPS (SSL/TLS)."
  - "Securely handle API tokens and keys in environment variables."
  - "Follow Supabase best practices (RLS, policies) to protect data at row level."
  - "Sanitize user input when relevant."
  - "Comply with GDPR and SoL data handling guidelines."

seo:
  - "Use semantic HTML tags (<header>, <main>, <footer>)."
  - "Add meta descriptions, titles, and alt texts."
  - "Generate sitemaps and robots.txt."
  - "Use structured headings (H1, H2, H3) for SEO clarity."

maintenance:
  - "Keep components modular and reusable."
  - "Follow a clear directory structure, as outlined in the Docs/file-dir.md."
  - "Continuously improve based on user feedback."
  - "Ensure easy scaling to support multiple home care companies, employees, and clients."

shadcn_missing:
  - "Run 'npx shadcn@latest init' to initialize shadcn/ui"
  - "Install missing components using:"
    - "npx shadcn@latest add button"
    - "npx shadcn@latest add card"
    - "npx shadcn@latest add form"
    - "npx shadcn@latest add input"
    - "npx shadcn@latest add select"
    - "npx shadcn@latest add tabs"
    - "npx shadcn@latest add dialog"
    - "npx shadcn@latest add sheet"
    - "npx shadcn@latest add table"
    - "npx shadcn@latest add toast"
    - "npx shadcn@latest add progress"
  - "Ensure components are added to src/components/ui/"
  - "Check imports use correct paths (@/components/ui/[component])"
  - "Required dependencies:"
    - "@radix-ui/react-progress"
    - "other shadcn dependencies will be installed automatically"

fixing errors:
- "for the code present we get this error:
  1. Check if the error is about missing dependencies
  2. Install required dependencies using npm/pnpm
  3. Verify shadcn components are properly initialized
  4. Check import paths are correct
  5. Run the development server to verify fixes
think step by step when fixing it."

